// Core variables and mixins
@import "../../node_modules/bootstrap/less/variables.less";
@import "../../node_modules/bootstrap/less/mixins.less";
// Resets and deps
@import "../../node_modules/bootstrap/less/normalize.less";
// @import "../../node_modules/bootstrap/less/print.less";
// Core CSS
@import "../../node_modules/bootstrap/less/scaffolding.less";
@import "../../node_modules/bootstrap/less/type.less";
@import "../../node_modules/bootstrap/less/grid.less";
// Utility classes
@import "../../node_modules/bootstrap/less/utilities.less";
@import "../../node_modules/bootstrap/less/responsive-utilities.less";

// block-grid
// https://gist.github.com/ChrisTM/8346916
[class*="block-grid-"] {
  display: block;
  margin: -(@grid-gutter-width/2);
  padding: 0;
  .clearfix();
}
 
.block-grid-item {
  display: inline;
  margin: 0;
  padding: (@grid-gutter-width/2);
  height: auto;
  float: left;
  width: 100%;
  list-style: none;  // for those who like to use `li` elements as block-grid-items
}
 
.block-grid (@per-row) {
  & > .block-grid-item {
    width: (100%/@per-row);
 
    @nth-equation: ~"@{per-row}n+1";
    &:nth-of-type(n) { clear: none; }
    &:nth-of-type(@{nth-equation}) { clear: both; }
  }
}
 
.block-grids(@size, @per-row: @grid-columns) when (@per-row > 0) {
  .block-grid-@{size}-@{per-row} { .block-grid(@per-row); }
  .block-grids(@size, (@per-row - 1));
}

.block-grids(xs);
@media (min-width: @screen-sm-min) { .block-grids(sm) }
@media (min-width: @screen-md-min) { .block-grids(md) }
@media (min-width: @screen-lg-min) { .block-grids(lg) }

// start packing it on here
//

